{"version":3,"sources":["components/sequencer/Step.jsx","components/sequencer/StepPattern.jsx","components/sequencer/Sequencer.jsx","components/Header.jsx","components/TimingController.jsx","components/Transport.jsx","components/Synth.js","util/Scheduler.js","util/audio/AudioContext.js","util/eventHandlers/events.js","util/specifyBrowser.js","App.jsx","serviceWorker.js","index.js","components/Instruments.js","util/eventHandlers/assignGlobalKeyBinds.js"],"names":["Step","toggleStep","instId","timing","currentStep","stepCt","stepInfo","triggered","activated","id","key","className","onClick","e","StepPattern","instruments","timeSignature","instElems","instrument","measureList","push","pattern","map","stepList","drawPatternMap","Sequencer","setInstruments","globalBPM","instName","instrmtsCopy","other","Headers","IB","TimingController","bpmObj","stepObj","setGlobalBPM","inputBPM","setInputBPM","type","onBlur","bpm","target","value","onChange","newBPM","validity","valid","length","Number","String","Transport","props","pauseColor","playing","color","playColor","togglePause","style","changePlayPause","Synth","AC","freq","this","wave","createNodes","bind","setFreq","setWaveform","setBaseValues","createOscillator","source","_freq_","frequency","_wave_","includes","real","Float32Array","imag","AudioContext","createPeriodicWave","disableNormalization","setPeriodicWave","scheduleNote","startTime","duration","callback","automation","gain","createGain","applyGain","console","log","linearRampToValueAtTime","preventArtifacts","start","stop","connect","destination","connectNodes","onended","scheduleStep","step","stepTimeLength","currentTime","window","webkitAudioContext","toggleStop","setCurrentStep","setPlaying","setInitialized","close","toggleAdvance","_t_","togglePlayPause","initialized","initialize","state","isFirefox","InstallTrigger","isChrome","chrome","webstore","runtime","alert","Error","specifyBrowser","Boolean","location","hostname","match","ReactDOM","render","eventsObj","useState","totalSteps","initInstState","instrumentsInit","Array","fill","Instruments","intervalTime","setIntervalTime","measure","setMeasure","SN","makeSilentNote","init","silentOsc","silentGain","bindsObj","document","onkeypress","eventKey","activeElement","body","preventDefault","hasOwnProperty","blur","assignGlobalKeyBinds","useEffect","delay","savedCallback","useRef","current","tick","setInterval","clearInterval","useInterval","lookForward","stepLength","t","tf","filteredMeasure","filter","stepTime","idx","note","newStepList","slice","elem","keys","ct","resume","suspend","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ac5c72e.chunk.js","sourcesContent":["// App > Sequencer > StepPattern > Step\n\n// react\nimport React from 'react';\n\n// modules\n\n// style\n\n// components\n\n// utilities\n\n// global vars\n\n// main\nexport default function Step({toggleStep, instId, timing}){\n    let {currentStep, stepCt, stepInfo} = timing;\n    let triggered = `${currentStep===stepCt}`;\n    let activated = `${stepInfo['activated']}`;\n    let id = `${instId}Step${stepCt}`;\n    let key = `s-${stepCt}`;\n    \n    return(\n        <div className='step' triggered={triggered} activated={activated} id={id} key={key} onClick={\n            (e) => {toggleStep(instId, stepCt)}}>\n        </div>\n    )\n}","// App > Sequencer > StepPattern\n\n// react\nimport React from 'react';\n\n// modules\n\n// style\n\n// components\nimport Step from './Step';\n\n// utilities\n\n// global vars\n\n// main\nexport default function StepPattern({instruments, toggleStep, timing}){\n    let {timeSignature, currentStep} = timing;\n\n    function measureDiv(stepList) {\n        return (\n            <div className='measure'>\n                {stepList}\n                <div className='signatureSpacer'></div>\n            </div>\n        )\n    }\n    function drawPatternMap(instruments){\n        let instElems = [];\n        for (let instId in instruments) {\n            let instrument = instruments[instId];\n            // if (instId==='kick' || instId==='snare') {console.log(instId, instrument);}\n            let measureList = [];\n            instElems.push(\n                <div className='instrument-container' key={`ic-${instId}`}>\n                    <div className='instrument' key={`i${instId}`}>{`${instId}`}</div>\n                    <div className='pattern' key={`p${instId}`}>{instrument.pattern.map((stepInfo, stepCt) => {\n                        let key = `ps${instId}-${stepCt}`\n                        if (stepCt%timeSignature===(0)){measureList = []}\n                            measureList.push(<Step key={key} toggleStep={toggleStep} instId={instId} timing={{currentStep, stepCt, stepInfo}} />\n                        )\n                        if (stepCt%timeSignature===(timeSignature-1)){\n                            return measureDiv(measureList)\n                        } \n                    })}</div>\n                </div>\n            )\n        }\n        return instElems\n    }\n    return(\n        <div className='step-pattern'>\n            {drawPatternMap(instruments)}\n        </div>\n    )\n}","// App > Sequencer\n\n// react\nimport React from 'react';\n\n// modules\n\n// style\n\n// components\nimport StepPattern from './StepPattern';\n\n// utilities\n\n// global vars\n\n// main\n\nexport default function Sequencer({instruments, setInstruments, timing}){\n    let {globalBPM, currentStep, timeSignature} = timing;\n    const toggleStep = (instName, stepCt) => {\n        let instrmtsCopy = {...instruments};\n        let {activated, ...other} = instrmtsCopy[instName]['pattern'][stepCt];\n        instrmtsCopy[instName]['pattern'][stepCt] = {'activated': !activated, ...other};\n        setInstruments(instrmtsCopy)\n    };\n\n    return(\n        <div className='sequencer'>\n            <StepPattern instruments={instruments} toggleStep={toggleStep} timing={{timeSignature, currentStep}} />\n        </div>\n    )\n}","// App > Header\n\n// react\nimport React from 'react';\n\n// modules\n\n// style\n\n// components\n\n// utilities\n\n// global vars\n\n// main\nexport default function Headers(){\n    return(\n        <nav className='header'>\n            <div className='title'>Cofi</div>\n            <div className='toggle'>\n                <div>Visualizer</div>\n                <div>Clear </div>\n                <div>Save</div>\n            </div>\n        </nav>\n    )\n}","// App > TimingController\n\n// react\nimport React from 'react';\n\n// modules\n\n// style\n\n// components\n\n// utilities\n\n// global vars\nlet IB = '128';\n\n// main\nexport default function TimingController({bpmObj, stepObj}){\n    let {globalBPM, setGlobalBPM, inputBPM, setInputBPM} = bpmObj;\n    let {currentStep} = stepObj;\n    \n    function handleChange(e){\n        const newBPM = (e.target.validity.valid && e.target.value.length <= 3 && Number(e.target.value) <= 200) ? e.target.value : String(IB);\n        setInputBPM(newBPM);\n    }\n    function handleBlur(e){\n        let bpm = e.target.value;\n        if (bpm > 50 && bpm < 200) {\n            setGlobalBPM(bpm);\n            setInputBPM(bpm);\n        } else {\n            setGlobalBPM(globalBPM);\n            setInputBPM(globalBPM)\n        }\n    }\n    function displayStepCount(){\n        return(\n            <div className='beat-count'>beat count: {currentStep + 1}</div>\n        )\n    }\n    return (\n        <div className='bpm-container'>\n            <div className='bpm-control'>\n                <input id='bpm-input' type=\"text\" pattern=\"[0-9]*\" onBlur={handleBlur} onChange={handleChange} value={inputBPM} />\n            </div>\n            {(currentStep >= 0) && displayStepCount()}\n        </div>\n    )\n}","// App > Transport\n\n// react\nimport React from 'react';\n\n// modules\n\n// style\n\n// components\n\n// utilities\n\n// global vars\n\n// main\nexport default function Transport(props){\n    function changePlayPause() {\n        let pauseColor = props.playing !== true ? {color:'red'}:{color:'black'};\n        let playColor  = props.playing === true ? {color:'red'}:{color:'black'};\n        return(\n            <div className='play-pause' onClick={props.togglePause}>\n                <span className='pause' style={pauseColor} >&#1231;&#1231;</span>\n                <span className='play' style={playColor} >&#9654;</span>\n            </div>\n        )\n    }\n    return(\n        <div className='transport-container'>\n            <div className='transport'>\n                <div className='rewind'>{`<`}</div>\n                {changePlayPause()}\n                <div className='stop'>&#9617;</div>\n                <div className='forward'>{`>`}</div>\n            </div>\n        </div>\n    )\n}","export default class Synth{\n    constructor(AC, freq){\n        this.AC = AC;\n        this.freq = freq;\n        this.wave = 'sine';\n        this.createNodes = this.createNodes.bind(this);\n        this.setFreq = this.setFreq.bind(this);\n        this.setWaveform = this.setWaveform.bind(this);\n        this.setBaseValues = this.setBaseValues.bind(this);\n\n        return this.setBaseValues(this.wave, freq, AC);\n    }\n    createNodes(AC){return {'source': AC.createOscillator()}}\n    setFreq(source, _freq_){\n        source['source'].frequency.value = _freq_;\n        return source\n    }\n    setWaveform(source, _wave_){\n        if (['sine','square','sawtooth','triangle'].includes(_wave_)) {\n            source['source'].type = _wave_\n        } else if (_wave_ === 'custom') {\n            let real = new Float32Array([0,1]);\n            let imag = new Float32Array([0,0]);\n            let wave = AudioContext.createPeriodicWave(real, imag, {disableNormalization: true});\n            source['source'].setPeriodicWave(wave);\n        } else if (_wave_ === 'none'){}\n    }\n    setBaseValues(_wave_, _freq_, AC){\n        let source = this.createNodes(AC);\n        this.setFreq(source, _freq_, AC)\n        this.setWaveform(source, _wave_)\n        return source\n    }\n}","// apply gain for all notes\nconst applyGain = (AC, source) => {\n    let gain = AC.createGain();\n    gain.gain.value = 0;\n    source['gain'] = gain;\n    return source;\n}\n\n// dynamic compress to prevent distortion\nconst preventArtifacts = (source, startTime) => {\n    source['gain'].gain.value = 0;\n    source['gain'].gain.linearRampToValueAtTime(0.8, startTime + 0.09);\n}\n\nconst connectNodes = (AC, source) => {\n    source['gain'].connect(AC.destination);\n    source['source'].connect(source['gain']);\n    // console.log('connected!');\n}\nexport const scheduleNote = (AC, source, startTime, duration, callback, automation) => {\n    // 1) create the gain node\n    source = applyGain(AC, source);\n    console.log('start tiem here and source: ', startTime, source);\n    \n    // 2) prevent clipping and aliasing\n    preventArtifacts(source, startTime)\n    \n    // 4) schedule start and stop\n    source['gain'].gain.linearRampToValueAtTime(0, startTime + 0.2);\n    source['source'].start(startTime);\n    source['source'].stop(startTime + duration)\n\n    if (source['source'].frequency.value !== 666) {\n        connectNodes(AC, source);\n    }\n    // ) on end\n    source['source'].onended = callback;\n    // // 3) connect to the audio context destination and gain\n     \n    return source\n}\n\n// schedule a single step for all instruments\nexport const scheduleStep = (AC, step, startTime, globalBPM, instruments) => {\n    // at this step, go thru each instrument, find active instruments play them\n    // go thru each instrument\n    for (let instrument in instruments){\n        // find active instrument\n        // console.log('gigg',instruments[instrument]['pattern'][step], AC, step, startTime, globalBPM, instruments);\n        \n        let activated = instruments[instrument]['pattern'][step]['activated'];\n        if (activated){\n            let source = new instruments[instrument]['source'](AC, instruments[instrument]['freq']);\n            console.log('my dource',source);\n\n            let automation = instruments[instrument]['pattern'][step]['automation'];\n            let stepTimeLength = 60 / globalBPM;\n            // console.log('scheduled! time= ', AC.currentTime, startTime, startTime-AC.currentTime);\n            // AC, {'source':note}, stepTime, stepLength\n            console.log('in step: start tiem here', startTime, AC.currentTime);\n            scheduleNote(AC, source, startTime, stepTimeLength/2);\n        }\n    }\n}","export const AC = new (window.AudioContext || window.webkitAudioContext)()","export const toggleStop = (AC, setCurrentStep, setPlaying, setInitialized) => {\n    setCurrentStep(-1);\n    setPlaying(false);\n    AC.close();\n    AC = new (window.AudioContext || window.webkitAudioContext)();\n    setInitialized(false);\n}\nexport const togglePause = (playing, setPlaying) => {\n    setPlaying(!playing);\n}\nexport const toggleAdvance = (_t_, currentStep, setCurrentStep) => {\n    let change = (_t_ === ',' && (_t_ !== '.' || _t_ !== true)) ? -1 : 1;\n    setCurrentStep(currentStep + change);\n}\n\nexport function togglePlayPause(e, AC, initialized, initialize, setInitialized, togglePause, playing, setPlaying) {\n    if (AC.state === 'suspended' && initialized === false) {\n        console.log('not initialized yet...');\n        initialize();\n        setInitialized(true);\n    }\n    togglePause(playing, setPlaying);\n}\n","export default function specifyBrowser(){\n    var isFirefox = typeof InstallTrigger !== 'undefined';\n    var isChrome = !!window.chrome && (\n        !!window.chrome.webstore || !!window.chrome.runtime\n    );\n    if (!(isFirefox || isChrome)){\n        alert(\"Please use either Firefox or Chrome\");throw new Error()\n    }\n}\nspecifyBrowser()","// react\nimport React, {useState, useEffect, useRef} from 'react';\n\n// modules\n\n// style\nimport './App.css';\n\n// components\nimport Sequencer from './components/sequencer/Sequencer';\nimport Header from './components/Header';\nimport TimingController from './components/TimingController';\nimport Transport from './components/Transport';\nimport Instruments from './components/Instruments';\n\n// utilities\nimport {scheduleNote, scheduleStep} from './util/Scheduler';\nimport {checkTiming} from './util/timing/checkTiming';\nimport {AC} from './util/audio/AudioContext';\nimport assignGlobalKeyBinds from './util/eventHandlers/assignGlobalKeyBinds';\nimport * as eventsObj from './util/eventHandlers/events';\nimport './util/specifyBrowser';\n\n// global vars\nlet stepList = []\n\n// main\nexport default function App(){\n    // destructuring\n    const {\n        toggleStop, toggleAdvance, togglePause, togglePlayPause,\n    } = eventsObj;\n\n    // states\n    // timing states\n    let [globalBPM, setGlobalBPM] = useState('128');\n    let [inputBPM, setInputBPM] = useState(globalBPM);\n    let [currentStep, setCurrentStep] = useState(-1);\n    let [totalSteps, setTotalSteps] = useState(16);\n    let [timeSignature, setTimeSignature] = useState(4);\n\n    // sequencer states\n    let [instruments, setInstruments] = useState(Instruments(AC, totalSteps));\n    let [automationToggle, setAutomationToggle] = useState(true);\n    let [playing, setPlaying] = useState(false);\n    let [initialized, setInitialized] = useState(false);\n    let [intervalTime, setIntervalTime] = useState(null);\n    let [measure, setMeasure] = useState([])\n\n    // set all keypress events here\n    const bindsObj = {\n        ' ': (e) => togglePlayPause(e, AC, initialized, initialize, setInitialized, togglePause, playing, setPlaying),\n        '?': () => toggleStop(AC, setCurrentStep, setPlaying, setInitialized),\n        ',': () => toggleAdvance(',', currentStep, setCurrentStep),\n        '.': () => toggleAdvance('.', currentStep, setCurrentStep),\n    }\n    assignGlobalKeyBinds(bindsObj)\n    \n    /////////////////// state togglers ///////////////////\n    // godly function made by Dan Abramov -- source: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n    const useInterval = (callback, delay) => {\n        const savedCallback = useRef();\n\n        // Remember the latest callback.\n        useEffect(() => {\n            savedCallback.current = callback;\n        }, [callback]);\n\n        // Set up the interval.\n        useEffect(() => {\n            function tick() {\n                savedCallback.current();\n            }\n            if (delay !== null) {\n                tick()\n                let id = setInterval(tick, delay);\n                return () => clearInterval(id);\n            }\n        }, [delay]);\n    }\n    function initialize(){\n        let SN = makeSilentNote(true);\n        SN.start(0);\n        SN.stop(0.05);\n    }\n    // produce a silent note for beat keeping\n    function makeSilentNote(init){\n        console.log('making note: time=', AC.currentTime);\n        let silentOsc = AC.createOscillator();\n        let silentGain = AC.createGain();\n        silentGain.gain.value = 0.0;\n        silentGain.gain.linearRampToValueAtTime(0.1, AC.currentTime + 0.09);\n        silentGain.gain.linearRampToValueAtTime(0, AC.currentTime + 0.15);\n        silentOsc.frequency.value = 666\n        silentOsc.connect(silentGain);\n        silentGain.connect(AC.destination);\n        if (init===false && AC.currentTime > 0) {setCurrentStep(currentStep + 1)}\n        return silentOsc\n    }\n\n    const updateStep = () => {\n        let newStep = currentStep + 1;\n        setCurrentStep(newStep);\n    }\n    const startInterval = () => {\n\n        let lookForward = intervalTime * 2 / 1000;\n        let stepLength = 60 / globalBPM;\n\n        // find beat based on time\n        let t = AC.currentTime;\n        let tf = t + lookForward;\n\n        // all the notes to be scheduled\n        let filteredMeasure = measure.filter((stepTime) => {\n            return stepTime > t && stepTime <= tf && !stepList.includes(stepTime) && t > 0.2;\n        })\n        \n        // schedule the notes\n        for (let idx = 0; idx < filteredMeasure.length; idx++) {\n            \n            let stepTime = filteredMeasure[idx];\n            // schedule all notes\n            let note = makeSilentNote(false);\n            scheduleNote(AC, {'source':note}, stepTime, stepLength);\n\n            // save all notes\n            let newStepList = [...stepList, stepTime];\n            if (newStepList.length > Number(totalSteps)) {newStepList = newStepList.slice(1)};\n            stepList = newStepList;\n        }\n        // slide the measure forward\n        if ((measure[measure.length-1] + stepLength) < tf || AC.currentTime > measure[0]) {\n            setMeasure(measure.map((elem) => {return elem + stepLength}))\n        }\n    }\n\n    //////////////////////////////////////////// HOOKS ////////////////////////////////////////////\n    // initialize audio context\n    useEffect(()=> {(AC.currentTime === 0) && initialize()},[])\n    \n    // set the interval\n    useInterval(startInterval, intervalTime)\n    \n    // this effect is for setting the new global current time and events that are triggered by play/pause events\n    useEffect(() => {\n        if (playing) {\n            // make a measure list\n            let t = AC.currentTime;\n            let measureList = [...Array(totalSteps - currentStep).keys()].map((ct) => {\n                let stepLength = 60 / globalBPM;\n                return (t + (ct * stepLength))\n            })\n            setMeasure(measureList);\n            AC.state==='suspended' && AC.resume();\n            setIntervalTime(15);\n        } else {\n            AC.state==='running' && AC.suspend();\n            setIntervalTime(null);\n        }\n    },[playing])\n\n    // events after step changes\n    useEffect(() => {\n        if (currentStep >= totalSteps) {\n            setCurrentStep(0)\n        };\n        if (currentStep > 0 && currentStep < totalSteps) {\n            scheduleStep(AC, currentStep, measure[0], globalBPM, instruments)\n        }\n    }, [currentStep])\n    \n    return (\n        <div className=\"App\">\n            <Header />\n            <Transport togglePause={togglePause} playing={playing} />\n            <TimingController bpmObj={{globalBPM, setGlobalBPM, inputBPM, setInputBPM}} stepObj={{totalSteps, currentStep}} />\n            <Sequencer instruments={instruments} setInstruments={setInstruments} timing={{globalBPM, currentStep, timeSignature}} />\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","// import {connectSrcGainDest} from '../util/NodeMgmt';\nimport Synth from './Synth';\n\n// const kick808 = (AC) => {\n//     // create source object\n//     let source = {};\n//     source['source'] = AC.createOscillator();\n//     source['source'].frequency.value = 150;\n//     source['gain'] = AC.createGain();\n    \n//     // connect to speakers\n//     connectSrcGainDest(source, AC.destination);\n\n//     // set envelope\n//     let ti = AC.currentTime;\n//     let tf = ti + 0.45;\n//     source['gain'].gain.setValueAtTime(0.5, ti);\n//     source['gain'].gain.exponentialRampToValueAtTime(0.001, tf);\n//     source['source'].start(ti);\n//     source['source'].stop(tf);\n// }\nexport default function Instruments(AC, totalSteps){\n    // init instruments state\n    let initInstState = {'triggered': false, 'activated': false, 'automation':{}}\n    let instrumentsInit = {\n        'kick': {'source':Synth, 'context':AC, 'freq': 261.6},\n        'snare': {'source':Synth,'context':AC, 'freq': 400},\n        'hihat_open': {'source':Synth,'context':AC, 'freq': 350},\n        'hihat_closed': {'source':Synth,'context':AC, 'freq': 300},\n        'clap': {'source':Synth,'context':AC, 'freq':250},\n        'rim': {'source':Synth,'context':AC, 'freq':200},\n        'bell': {'source':Synth,'context':AC, 'freq':180},\n    }\n    for (let instrument in instrumentsInit) {\n        instrumentsInit[instrument]['pattern'] = new Array(totalSteps).fill(initInstState)\n    }\n    return instrumentsInit\n}","export default function assignGlobalKeyBinds(bindsObj){\n    // set all keypress events here\n    document.onkeypress = (e) => {\n        let eventKey = e.key;\n\n        // if we're in the main body scope\n        if (document.activeElement === document.body) {\n            e.preventDefault()\n\n            if (bindsObj.hasOwnProperty(eventKey)) {\n                bindsObj[eventKey](e)\n            }\n        }\n        else {\n            if (eventKey === 'Escape') {document.activeElement.blur()}\n        }\n    }\n}"],"sourceRoot":""}