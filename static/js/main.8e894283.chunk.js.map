{"version":3,"sources":["components/sequencer/Step.js","components/sequencer/StepPattern.js","components/sequencer/Automation.js","components/sequencer/Sequencer.js","components/Header.js","components/TimingController.js","components/Transport.js","components/util/NodeMgmt.js","components/Synth.js","components/util/Scheduler.js","App.js","components/Instruments.js","serviceWorker.js","index.js"],"names":["Step","toggleStep","instId","timing","currentStep","stepCt","stepInfo","triggered","activated","id","key","className","onClick","e","StepPattern","instruments","timeSignature","instElems","instrument","measureList","push","pattern","map","stepList","drawPatternMap","Automation","Sequencer","setInstruments","toggles","handleSequencerToggle","automationToggle","globalBPM","instName","instrmtsCopy","other","Headers","IB","TimingController","bpmObj","stepObj","setGlobalBPM","inputBPM","setInputBPM","type","onBlur","bpm","target","value","onChange","newBPM","validity","valid","length","Number","String","Transport","props","pauseColor","playing","color","playColor","togglePause","style","changePlayPause","Synth","AC","freq","this","wave","createNodes","bind","setFreq","setWaveform","setBaseValues","createOscillator","source","_freq_","frequency","_wave_","includes","real","Float32Array","imag","AudioContext","createPeriodicWave","disableNormalization","setPeriodicWave","scheduleNote","startTime","duration","callback","automation","gain","createGain","applyGain","console","log","linearRampToValueAtTime","preventArtifacts","start","stop","connect","destination","connectNodes","onended","scheduleStep","step","stepTimeLength","currentTime","thelist","window","webkitAudioContext","App","useState","setCurrentStep","totalSteps","setTimeSignature","initInstState","instrumentsInit","Array","fill","Instruments","setAutomationToggle","setPlaying","initialized","setInitialized","intervalTime","setIntervalTime","measure","setMeasure","document","onkeypress","activeElement","body","preventDefault","state","initialize","toggleStop","toggleAdvance","blur","close","_t_","SN","makeSilentNote","init","silentOsc","silentGain","useEffect","delay","savedCallback","useRef","current","tick","setInterval","clearInterval","useInterval","lookForward","stepLength","t","tf","filteredMeasure","filter","stepTime","idx","note","newStepList","slice","elem","keys","ct","resume","suspend","sum","difflist","forEach","diff","pop","element","checkTiming","handleTimeSignatureChange","newTimeSignature","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e894283.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Step({toggleStep, instId, timing}){\n    let {currentStep, stepCt, stepInfo} = timing;\n    let triggered = `${currentStep===stepCt}`;\n    let activated = `${stepInfo['activated']}`;\n    let id = `${instId}Step${stepCt}`;\n    let key = `s-${stepCt}`;\n    \n    return(\n        <div className='step' triggered={triggered} activated={activated} id={id} key={key} onClick={\n            (e) => {toggleStep(instId, stepCt)}}>\n        </div>\n    )\n}","import React from 'react';\nimport Step from './Step';\nexport default function StepPattern({instruments, toggleStep, timing}){\n    let {timeSignature, currentStep} = timing;\n\n    function measureDiv(stepList) {\n        return (\n            <div className='measure'>\n                {stepList}\n                <div className='signatureSpacer'></div>\n            </div>\n        )\n    }\n    function drawPatternMap(instruments){\n        let instElems = [];\n        for (let instId in instruments) {\n            let instrument = instruments[instId];\n            // if (instId==='kick' || instId==='snare') {console.log(instId, instrument);}\n            let measureList = [];\n            instElems.push(\n                <div className='instrument-container' key={`ic-${instId}`}>\n                    <div className='instrument' key={`i${instId}`}>{`${instId}`}</div>\n                    <div className='pattern' key={`p${instId}`}>{instrument.pattern.map((stepInfo, stepCt) => {\n                        let key = `ps${instId}-${stepCt}`\n                        if (stepCt%timeSignature===(0)){measureList = []}\n                            measureList.push(<Step key={key} toggleStep={toggleStep} instId={instId} timing={{currentStep, stepCt, stepInfo}} />\n                        )\n                        if (stepCt%timeSignature===(timeSignature-1)){\n                            return measureDiv(measureList)\n                        } \n                    })}</div>\n                </div>\n            )\n        }\n        return instElems\n    }\n    return(\n        <div className='step-pattern'>\n            {drawPatternMap(instruments)}\n        </div>\n    )\n}","import React from 'react';\n\nexport default function Automation(){\n    return(\n        <div className='automation'>\n            <div className='instrument'>\n                <div className='pattern'>\n                    were in automation mode\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport StepPattern from './StepPattern';\nimport Automation from './Automation';\n\nexport default function Sequencer({instruments, setInstruments, toggles, timing}){\n    let {handleSequencerToggle, automationToggle} = toggles;\n    let {globalBPM, currentStep, timeSignature} = timing;\n    const toggleStep = (instName, stepCt) => {\n        let instrmtsCopy = {...instruments};\n        let {activated, ...other} = instrmtsCopy[instName]['pattern'][stepCt];\n        instrmtsCopy[instName]['pattern'][stepCt] = {'activated': !activated, ...other};\n        setInstruments(instrmtsCopy)\n    };\n\n    return(\n        <div className='sequencer'>\n            <div className='sequencer-toggle' onClick={handleSequencerToggle} > {automationToggle ? 'Pattern': 'Automation'}</div>\n            {automationToggle ? <StepPattern instruments={instruments} toggleStep={toggleStep} timing={{timeSignature, currentStep}} />: <Automation instruments={instruments} />}\n        </div>\n    )\n}","import React from 'react';\n\nexport default function Headers(){\n    return(\n        <nav className='header'>\n            <div className='title'>Cofi</div>\n            <div className='toggle'>\n                <div>Visualizer</div>\n                <div>Clear </div>\n                <div>Save</div>\n            </div>\n        </nav>\n    )\n}","import React from 'react'\nlet IB = '128';\nexport default function TimingController({bpmObj, stepObj}){\n    let {globalBPM, setGlobalBPM, inputBPM, setInputBPM} = bpmObj;\n    let {currentStep} = stepObj;\n    \n    function handleChange(e){\n        // const newBPM = (e.target.validity.valid && e.target.value.length <= 3 && Number(e.target.value) <= 200) ? e.target.value : String(inputBPM);\n        const newBPM = (e.target.validity.valid && e.target.value.length <= 3 && Number(e.target.value) <= 200) ? e.target.value : String(IB);\n        setInputBPM(newBPM);\n    }\n    function handleBlur(e){\n        let bpm = e.target.value;\n        if (bpm > 50 && bpm < 200) {\n            setGlobalBPM(bpm);\n            setInputBPM(bpm);\n        } else {\n            setGlobalBPM(globalBPM);\n            setInputBPM(globalBPM)\n        }\n    }\n    function displayStepCount(){\n        return(\n            <div className='beat-count'>beat count: {currentStep + 1}</div>\n        )\n    }\n    return (\n        <div className='bpm-container'>\n            <div className='bpm-control'>\n                <input id='bpm-input' type=\"text\" pattern=\"[0-9]*\" onBlur={handleBlur} onChange={handleChange} value={inputBPM} />\n            </div>\n            {(currentStep >= 0) && displayStepCount()}\n        </div>\n    )\n}","import React from 'react'\n\nexport default function Transport(props){\n    function changePlayPause() {\n        let pauseColor = props.playing !== true ? {color:'red'}:{color:'black'};\n        let playColor  = props.playing === true ? {color:'red'}:{color:'black'};\n        return(\n            <div className='play-pause' onClick={props.togglePause}>\n                <span className='pause' style={pauseColor} >&#1231;&#1231;</span>\n                <span className='play' style={playColor} >&#9654;</span>\n            </div>\n        )\n    }\n    return(\n        <div className='transport-container'>\n            <div className='transport'>\n                <div className='rewind'>{`<`}</div>\n                {changePlayPause()}\n                <div className='stop'>&#9617;</div>\n                <div className='forward'>{`>`}</div>\n            </div>\n        </div>\n    )\n}","export const connectSrcGainDest = (src, dest) => {\n    if (( typeof src !== typeof {} ) || ( !src['source'] ) || ( !src['gain'] )) {\n        console.log('please enter valid source');\n        // yield('please enter valid source');\n        alert('please enter valid source');\n    } else {\n        src['gain'].connect(dest);\n        src['source'].connect(src['gain']);\n        return src;\n    }\n}","export default class Synth{\n    constructor(AC, freq){\n        this.AC = AC;\n        this.freq = freq;\n        this.wave = 'sine';\n        this.createNodes = this.createNodes.bind(this);\n        this.setFreq = this.setFreq.bind(this);\n        // this.connectNodes = this.connectNodes.bind(this);\n        this.setWaveform = this.setWaveform.bind(this);\n        this.setBaseValues = this.setBaseValues.bind(this);\n\n        return this.setBaseValues(this.wave, freq, AC);\n    }\n    createNodes(AC){return {'source': AC.createOscillator()}}\n    setFreq(source, _freq_){\n        source['source'].frequency.value = _freq_;\n        return source\n    }\n    setWaveform(source, _wave_){\n        if (['sine','square','sawtooth','triangle'].includes(_wave_)) {\n            source['source'].type = _wave_\n        } else if (_wave_ === 'custom') {\n            let real = new Float32Array([0,1]);\n            let imag = new Float32Array([0,0]);\n            let wave = AudioContext.createPeriodicWave(real, imag, {disableNormalization: true});\n            source['source'].setPeriodicWave(wave);\n        } else if (_wave_ === 'none'){}\n    }\n    setBaseValues(_wave_, _freq_, AC){\n        let source = this.createNodes(AC);\n        this.setFreq(source, _freq_, AC)\n        this.setWaveform(source, _wave_)\n        return source\n    }\n}\n\n// export default function Synth(AC, freq){\n//     function createNodes(AC){return {'source': AC.createOscillator(), 'gain': AC.createGain()}}\n//     function setFreq(source, _freq_, AC){\n//         source['gain'].gain.value = 0;\n//         let _t_ = AC.currentTime;\n//         source['gain'].gain.setValueAtTime(0, _t_)\n//         source['gain'].gain.linearRampToValueAtTime(0.2, _t_ + 0.07);\n//         source['source'].frequency.value = _freq_;\n//     }\n//     function connectNodes(source, AC){\n//         source['gain'].connect(AC.destination);\n//         source['source'].connect(source['gain']);\n//     }\n//     function setWaveform(source, _wave_){\n//         if (['sine','square','sawtooth','triangle'].includes(_wave_)) {\n//             source['source'].type = _wave_\n//         } else if (_wave_ === 'custom') {\n//             let real = new Float32Array([0,1]);\n//             let imag = new Float32Array([0,0]);\n//             let wave = AudioContext.createPeriodicWave(real, imag, {disableNormalization: true});\n//             source['source'].setPeriodicWave(wave);\n//         } else if (_wave_ === 'none'){}\n//     }\n//     function setBaseValues(_wave_, _freq_, AC){\n//         let source = createNodes(AC);\n//         setFreq(source, _freq_, AC)\n//         connectNodes(source, AC)\n//         setWaveform(source, _wave_)\n//         return source\n//     }\n//     return setBaseValues('sine', freq, AC);\n// }","// apply gain for all notes\nconst applyGain = (AC, source) => {\n    let gain = AC.createGain();\n    gain.gain.value = 0;\n    source['gain'] = gain;\n    return source;\n}\n\n// dynamic compress to prevent distortion\nconst preventArtifacts = (source, startTime) => {\n    source['gain'].gain.value = 0;\n    source['gain'].gain.linearRampToValueAtTime(0.8, startTime + 0.09);\n}\n\nconst connectNodes = (AC, source) => {\n    source['gain'].connect(AC.destination);\n    source['source'].connect(source['gain']);\n    // console.log('connected!');\n}\nexport const scheduleNote = (AC, source, startTime, duration, callback, automation) => {\n    // 1) create the gain node\n    source = applyGain(AC, source);\n    console.log('start tiem here and source: ', startTime, source);\n    \n    // 2) prevent clipping and aliasing\n    preventArtifacts(source, startTime)\n    \n    // 4) schedule start and stop\n    source['gain'].gain.linearRampToValueAtTime(0, startTime + 0.2);\n    source['source'].start(startTime);\n    source['source'].stop(startTime + duration)\n\n    if (source['source'].frequency.value !== 666) {\n        connectNodes(AC, source);\n    }\n    // ) on end\n    source['source'].onended = callback;\n    // // 3) connect to the audio context destination and gain\n     \n    return source\n}\n\n// schedule a single step for all instruments\nexport const scheduleStep = (AC, step, startTime, globalBPM, instruments) => {\n    // at this step, go thru each instrument, find active instruments play them\n    // go thru each instrument\n    for (let instrument in instruments){\n        // find active instrument\n        // console.log('gigg',instruments[instrument]['pattern'][step], AC, step, startTime, globalBPM, instruments);\n        \n        let activated = instruments[instrument]['pattern'][step]['activated'];\n        if (activated){\n            let source = new instruments[instrument]['source'](AC, instruments[instrument]['freq']);\n            console.log('my dource',source);\n\n            let automation = instruments[instrument]['pattern'][step]['automation'];\n            let stepTimeLength = 60 / globalBPM;\n            // console.log('scheduled! time= ', AC.currentTime, startTime, startTime-AC.currentTime);\n            // AC, {'source':note}, stepTime, stepLength\n            console.log('in step: start tiem here', startTime, AC.currentTime);\n            scheduleNote(AC, source, startTime, stepTimeLength/2);\n        }\n    }\n}","import React, {useState, useEffect, useRef} from 'react';\nimport './App.css';\nimport Sequencer from './components/sequencer/Sequencer';\nimport Header from './components/Header';\nimport TimingController from './components/TimingController';\nimport Transport from './components/Transport';\nimport Instruments from './components/Instruments';\nimport {scheduleNote, scheduleStep} from './components/util/Scheduler';\n// import Visualizer from './components/Visualizer';\n// import Synth from './components/Synth';\n\nlet thelist = [];\nfunction checkTiming(thelist, t){\n    thelist.push(t);\n    let sum = 0;\n    let difflist = [];\n    thelist.forEach((elem, idx) => {\n        if (idx > 0) {\n            let diff = thelist[idx+1] - elem;\n            difflist.push(diff);\n        }\n    });\n    difflist.pop();\n    difflist.forEach(element => {\n        sum += element\n    });\n    console.log(`avg: ${sum/difflist.length}`, difflist);\n}\n\n// set the global audio context here\nlet AC = new (window.AudioContext || window.webkitAudioContext)()\nlet stepList = []\n// misc global vars\nfunction App() {\n    // timing states\n    let [globalBPM, setGlobalBPM] = useState('128');\n    let [inputBPM, setInputBPM] = useState(globalBPM);\n    let [currentStep, setCurrentStep] = useState(-1);\n    let [totalSteps, setTotalSteps] = useState(16);\n    let [timeSignature, setTimeSignature] = useState(4);\n\n    // sequencer states\n    let [instruments, setInstruments] = useState(Instruments(AC, totalSteps));\n    let [automationToggle, setAutomationToggle] = useState(true);\n    let [playing, setPlaying] = useState(false);\n    let [initialized, setInitialized] = useState(false);\n    let [intervalTime, setIntervalTime] = useState(null);\n    let [measure, setMeasure] = useState([])\n\n    // set all keypress events here\n    document.onkeypress = (e) => {\n        let key = e.key;\n        // console.log(key);\n        // if we're in the main body scope\n        if (document.activeElement === document.body) {\n            e.preventDefault()\n            // console.log(key);\n            if (key === 'p'){handleSequencerToggle(e, automationToggle, setAutomationToggle)}\n            if (key === ' '){\n                if (AC.state === 'suspended' && initialized===false) {console.log('not initialized yet...');initialize(); setInitialized(true);}\n                togglePause(e);\n            }\n            if (key === '?') {toggleStop()}\n            if (key === ',' || key === '.') {toggleAdvance(key)}\n            }\n        else {\n            if (key === 'Escape') {document.activeElement.blur()}\n        }\n    }\n\n    /////////////////// event handlers ///////////////////\n    const handleTimeSignatureChange = (newTimeSignature) => {setTimeSignature(newTimeSignature)}\n    function handleSequencerToggle(){setAutomationToggle(!automationToggle)}\n    \n    /////////////////// state togglers ///////////////////\n    const toggleStop = () => {setCurrentStep(-1);setPlaying(false);AC.close(); AC = new (window.AudioContext || window.webkitAudioContext)(); setInitialized(false)}\n    const togglePause = () => {setPlaying(!playing);}\n    const toggleAdvance = (_t_) => {let change = (_t_===',' && (_t_!=='.' || _t_!==true)) ? -1 : 1;setCurrentStep(currentStep + change)}\n\n    // godly function made by Dan Abramov -- source: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n    const useInterval = (callback, delay) => {\n        const savedCallback = useRef();\n\n        // Remember the latest callback.\n        useEffect(() => {\n            savedCallback.current = callback;\n        }, [callback]);\n\n        // Set up the interval.\n        useEffect(() => {\n            function tick() {\n                savedCallback.current();\n            }\n            if (delay !== null) {\n                tick()\n                let id = setInterval(tick, delay);\n                return () => clearInterval(id);\n            }\n        }, [delay]);\n    }\n    function initialize(){\n        let SN = makeSilentNote(true);\n        SN.start(0);\n        SN.stop(0.05);\n    }\n    // produce a silent note for beat keeping\n    function makeSilentNote(init){\n        console.log('making note: time=', AC.currentTime);\n        let silentOsc = AC.createOscillator();\n        let silentGain = AC.createGain();\n        silentGain.gain.value = 0.0;\n        silentGain.gain.linearRampToValueAtTime(0.1, AC.currentTime + 0.09);\n        silentGain.gain.linearRampToValueAtTime(0, AC.currentTime + 0.15);\n        silentOsc.frequency.value = 666\n        silentOsc.connect(silentGain);\n        silentGain.connect(AC.destination);\n        if (init===false && AC.currentTime > 0) {setCurrentStep(currentStep + 1)}\n        return silentOsc\n    }\n\n    const updateStep = () => {\n        let newStep = currentStep + 1;\n        setCurrentStep(newStep);\n    }\n    const startInterval = () => {\n\n        let lookForward = intervalTime * 2 / 1000;\n        let stepLength = 60 / globalBPM;\n\n        // find beat based on time\n        let t = AC.currentTime;\n        let tf = t + lookForward;\n\n        // all the notes to be scheduled\n        let filteredMeasure = measure.filter((stepTime) => {\n            return stepTime > t && stepTime <= tf && !stepList.includes(stepTime) && t > 0.2;\n        })\n        \n        // schedule the notes\n        for (let idx = 0; idx < filteredMeasure.length; idx++) {\n            \n            let stepTime = filteredMeasure[idx];\n            // schedule all notes\n            let note = makeSilentNote(false);\n            scheduleNote(AC, {'source':note}, stepTime, stepLength);\n\n            // save all notes\n            let newStepList = [...stepList, stepTime];\n            if (newStepList.length > Number(totalSteps)) {newStepList = newStepList.slice(1)};\n            stepList = newStepList;\n        }\n        // slide the measure forward\n        if ((measure[measure.length-1] + stepLength) < tf || AC.currentTime > measure[0]) {\n            setMeasure(measure.map((elem) => {return elem + stepLength}))\n        }\n    }\n\n    //////////////////////////////////////////// HOOKS ////////////////////////////////////////////\n    // initialize audio context\n    useEffect(()=> {(AC.currentTime === 0) && initialize()},[])\n    \n    // set the interval\n    useInterval(startInterval, intervalTime)\n    \n    // this effect is for setting the new global current time and events that are triggered by play/pause events\n    useEffect(() => {\n        if (playing) {\n            // make a measure list\n            let t = AC.currentTime;\n            let measureList = [...Array(totalSteps - currentStep).keys()].map((ct) => {\n                let stepLength = 60 / globalBPM;\n                return (t + (ct * stepLength))\n            })\n            setMeasure(measureList);\n            AC.state==='suspended' && AC.resume();\n            setIntervalTime(15);\n        } else {\n            AC.state==='running' && AC.suspend();\n            setIntervalTime(null);\n        }\n    },[playing])\n\n    // events after step changes\n    useEffect(() => {\n        if (currentStep >= totalSteps) {\n            setCurrentStep(0)\n        };\n        if (currentStep > 0 && currentStep < totalSteps) {\n            scheduleStep(AC, currentStep, measure[0], globalBPM, instruments)\n        }\n        checkTiming(thelist, AC.currentTime)\n    }, [currentStep])\n    \n    return (\n        <div className=\"App\">\n            <Header />\n            <Transport togglePause={togglePause} playing={playing} />\n            <TimingController bpmObj={{globalBPM, setGlobalBPM, inputBPM, setInputBPM, handleTimeSignatureChange}} stepObj={{totalSteps, currentStep}} />\n            <Sequencer instruments={instruments} setInstruments={setInstruments} timing={{globalBPM, currentStep, timeSignature}} toggles={{handleSequencerToggle, automationToggle}} />\n            {/* <Visualizer globalBPM={globalBPM} /> */}\n        </div>\n    );\n}\nexport default App;","import {connectSrcGainDest} from './util/NodeMgmt';\nimport Synth from './Synth';\n\nconst kick808 = (AC) => {\n    // create source object\n    let source = {};\n    source['source'] = AC.createOscillator();\n    source['source'].frequency.value = 150;\n    source['gain'] = AC.createGain();\n    \n    // connect to speakers\n    connectSrcGainDest(source, AC.destination);\n\n    // set envelope\n    let ti = AC.currentTime;\n    let tf = ti + 0.45;\n    source['gain'].gain.setValueAtTime(0.5, ti);\n    source['gain'].gain.exponentialRampToValueAtTime(0.001, tf);\n    source['source'].start(ti);\n    source['source'].stop(tf);\n}\nexport default function Instruments(AC, totalSteps){\n    // init instruments state\n    let initInstState = {'triggered': false, 'activated': false, 'automation':{}}\n    let instrumentsInit = {\n        'kick': {'source':Synth, 'context':AC, 'freq': 261.6},\n        'snare': {'source':Synth,'context':AC, 'freq': 400},\n        'hihat_open': {'source':Synth,'context':AC, 'freq': 350},\n        'hihat_closed': {'source':Synth,'context':AC, 'freq': 300},\n        'clap': {'source':Synth,'context':AC, 'freq':250},\n        'rim': {'source':Synth,'context':AC, 'freq':200},\n        'bell': {'source':Synth,'context':AC, 'freq':180},\n    }\n    for (let instrument in instrumentsInit) {\n        instrumentsInit[instrument]['pattern'] = new Array(totalSteps).fill(initInstState)\n    }\n    return instrumentsInit\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}